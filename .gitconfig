[core]
	editor = vim
	autocrlf = input
[merge]
    keepBackup = false;
    tool = p4merge
[mergetool]
    prompt = false
[mergetool "p4merge"]
    cmd = p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false
[diff]
    tool = p4merge
[difftool]
    prompt = false
[difftool "p4merge"]
    cmd = p4merge "$LOCAL" "$REMOTE"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

[user]
	email = bhkang@wise-fashion.com
	name = bhkang

[branch]
	autosetuprebase = always
[pull]
	rebase = true
[alias]
	echo = "!f() { if [ $# -eq 0 ]; then echo zero; else echo n=$# 1=$1 2=$2 *=$* @=$@; fi; }; f"
	alias = "!f() { if [ $# -eq 0 ]; then git config --get-regexp alias; else git config --global alias.$*; fi }; f"
	co = checkout
	br = branch
	ci = commit
	cd = commit --amend
	df = diff -C --color-words
	ext = !\"C:/Program Files (x86)/GitExtensions/GitExtensions.exe\"&
	fixup = !sh -c 'git commit --fixup=$1' -
	squash = !sh -c 'git commit --squash=$1' -
	find = !sh -c 'git lg --grep="$@"' -   # search for a string in the commit message log
	srch = !sh -c 'git grep "$@" $(git rev-list --all)' -   # search for a string in all commits
	st = status --short --branch
	unstage = reset HEAD --
	discard = checkout --
	fa = fetch --all
	fm = fetch origin master:master
	pu = "!f() { \
		[[ $(git config \"branch.$(git symbolic-ref --short HEAD).merge\") = '' ]] && \
		git push -u origin $(git symbolic-ref --short HEAD) $@ || \
		git push $@; \
	}; f"
	rb = rebase
	rbi = rebase -i
	rbc = rebase --continue
	rba = rebase --abort
	rpo = remote prune origin
	ll = log --pretty=format:%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn] --decorate --numstat
	ld = log --pretty=format:%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn] --decorate --date=short --graph
	ls = log --pretty=format:%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn] --decorate --date=relative
	lg = log --graph --abbrev-commit --decorate --format=format:'%C(cyan)%h%C(reset) - %C(green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(yellow)%d%C(reset)' --all
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[color]
	ui = auto
[i18n]
	logOutputEncoding = utf-8
	commitEncoding = utf-8
